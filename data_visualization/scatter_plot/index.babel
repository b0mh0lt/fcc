const projectName = 'scatter-plot';
localStorage.setItem('example_project', 'D3: Scatter Plot');

class ScatterPlot extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      containerWidth: null,
      data: []
    };
    
    this.resizeContainer = this.resizeContainer.bind(this);
  }
  
  componentDidMount() {
    fetch('https://rawgit.com/bomholtm/fcc/master/data_visualization/scatter_plot/data.json')
      .then(res => res.json())
      .then(res => this.setState({data: res}))
    
    this.resizeContainer();
    window.addEventListener('resize', this.resizeContainer);
  }
  
  componentWillUnmount() {
    window.removeEventListener('resize', this.resizeContainer);
  }
  
  resizeContainer() {
    const { containerWidth } = this.state;
    const currentContainerWidth = this.chartContainer.getBoundingClientRect().width;
    const shouldResize = containerWidth !== currentContainerWidth;
    
    if (shouldResize) {
      this.setState({
        containerWidth: currentContainerWidth
      })
    }
  }
  
  isTooltip({ isMove, year, winner, nationality, vehicle, time }) {
    this.setState({
      isMove: isMove,
      year: year,
      winner: winner,
      nationality: nationality,
      vehicle: vehicle,
      time: time
    });
  }
  
  render() {
    const { containerWidth, data, isMove, year, winner, nationality, vehicle, time } = this.state;
    
    const getMinTime = d => {
			let [mm, ss, ll] = d.Time.split(/[:.]/).map(x => Number(x));
			let date = new Date();
      date.setHours(0);
			date.setMinutes(mm - 1);
			date.setSeconds(30);
      date.setMilliseconds(0);
			return date;
		}
    
    const getMaxTime = d => {
			let [mm, ss, ll] = d.Time.split(/[:.]/).map(x => Number(x));
			let date = new Date();
      date.setHours(0);
			date.setMinutes(mm + 1);
			date.setSeconds(30);
      date.setMilliseconds(0);
			return date;
		}
    
    let minYear = d3.min(data, d => d.Year) - 4;
    let maxYear = d3.max(data, d => d.Year) + 1;
    let minTime = d3.min(data, d => getMinTime(d));
		let maxTime = d3.max(data, d => getMaxTime(d));
    
    const dimensions = { width: Math.max(containerWidth, 359), height: 560 };
    const margins = { top: 24, right: 24, bottom: 24, left: 48 };
    
    const xScale = d3.scaleLinear()
      .domain([minYear, maxYear])
      .range([margins.left, dimensions.width - margins.right]);
    
    const yScale = d3.scaleTime()
      .domain([maxTime, minTime])
      .range([dimensions.height - margins.bottom, margins.top]);
    
    return (
      <div style={{padding: 8, textAlign: 'center'}}>
        <h1 id='title' style={{margin: '.75em 0 0', fontSize: '1.75em', color: '#212121'}}>Pikes Peak</h1>
        <h2 style={{margin: 0, fontSize: '1.25em', color: '#9e9e9e', fontWeight: 400}}>International Hill Climb</h2>
        
        <div
          id='graph'
          ref={(el) => {this.chartContainer = el}}
          style={{maxWidth: 640, margin: '.5em auto 2em', position: 'relative'}}
          >
          <Tooltip
            isMove={isMove}
            year={year}
            winner={winner}
            nationality={nationality}
            vehicle={vehicle}
            time={time}
            dimensions={dimensions}
          />
          <svg width={dimensions.width} height={dimensions.height}>
            <Axes
              scales={{xScale, yScale}}
              dimensions={dimensions}
              margins={margins}
            />
            <Dots
              scales={{xScale, yScale}}
              dimensions={dimensions}
              margins={margins}
              data={data}
              isTooltip={this.isTooltip.bind(this)}
            />
          </svg>
        </div>
        
        <div id='legend'>
          <p style={{fontSize: 11, fontWeight: 700, letterSpacing: 1, textAlign:'left', margin: '0 auto', color: '#424242'}}>Legend</p>
          <div style={{fontSize: 10, padding: 6, margin: '0 auto 3em', border: '1px solid #424242', textAlign: 'left', display: 'flex', flexWrap: 'wrap'}}>
            
            <div style={{flex: '1 210px', minWidth: 0}}>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#ff9100', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>no official competition</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#ff1744', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>was run on a shortened course</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#d500f9', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>the course was 0% paved</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#651fff', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>the course was 6% paved</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#3d5afe', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>the course was 21% paved</span>
              </p>
            </div>
            
            <div style={{flex: '1 210px', minWidth: 0}}>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#2979ff', borderRadius: '50%', display: 'inline-block'}}></span>
              <span>the course was 35% paved</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#00b0ff', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>the course was 46% paved</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#00e5ff', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>the course was 57% paved</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#1de9b6', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>the course was 76% paved</span>
              </p>
              <p style={{margin: '0 auto', width: 210}}>
                <span style={{height: 8, width: 8, margin: '0 8px', backgroundColor: '#00e676', borderRadius: '50%', display: 'inline-block'}}></span>
                <span>the course was 100% paved</span>
              </p>
            </div>
            
          </div>
        </div>
        
        <a href='https://github.com/bomholtm/fcc' target='_blank' rel='noopener noreferrer' style={{color: '#424242', textDecoration: 'none', fontWeight: 700, fontSize: 15 , paddingBottom: '.75em'}}>
          <i className='fab fa-github-alt fa-lg' style={{marginRight: '.5em'}}></i>
          bomholtm/fcc
        </a>
      </div>
    );
  }
}

const Tooltip = ({ isMove, year, winner, nationality, vehicle, time, dimensions }) => {
  return (
    <div id='tooltip' data-year={year} style={{visibility: isMove ? 'visible' : 'hidden', backgroundColor: 'rgba(158, 158, 158, .5)', color: '#424242', padding: '0 12px', borderRadius: 4, textAlign: 'left', fontSize: 13, position: 'absolute', top: dimensions.height - 200, left: dimensions.width - 275, width: 221}}>
      
      <div style={{margin: '6px 0'}}>
        <span style={{letterSpacing: 1, fontWeight: 700}}>{time}</span>
      </div>
      <div style={{margin: '6px 0'}}>
        <img src={nationality} style={{margin: '0 12px -1px 0'}} />
        <span>{winner} ({year})</span>
      </div>
      <div style={{margin: '6px 0'}}>
        <span>{vehicle}</span>
      </div>
      
    </div>
  );
}

class Axes extends React.Component {
  constructor(props) {
    super(props);
  }
  
  render() {
    const { scales, dimensions, margins } = this.props;
    const { xScale, yScale } = scales;
    const { height, width } = dimensions;
    const { top, right, bottom, left } = margins;

    return (
      <g>
        <Axis
          axisFunction={d3.axisBottom}
          scale={xScale}
          id='x-axis'
          translate={`translate(0, ${height - bottom})`}
          ticks={10}
          tickSizeOuter={0}
          tickSizeInner={top + bottom - height}
          tickPadding={8}
          tickFormat={d3.format('d')}
        />
        <AxisLegend
          transform={`translate(${width - right - 128}, ${height - bottom - 8})`}
          text={"Year (1916-2018)"}
        />
        <Axis
          axisFunction={d3.axisLeft}
          scale={yScale}
          id='y-axis'
          translate={`translate(${left}, 0)`}
          ticks={d3.timeMinute.every(2)}
          tickSizeOuter={0}
          tickSizeInner={right + left - width}
          tickPadding={8}
          tickFormat={d3.timeFormat('%M:%S')}
        />
        <AxisLegend
          transform={`translate(${left + 16}, ${top + 116}), rotate(-90)`}
          text={"Time (minutes)"}
        />
      </g>
    );
  }
}

class Axis extends React.Component {
  constructor(props) {
    super(props);
  }
  
  componentDidMount() {
    this.renderAxis();
  }
  
  componentDidUpdate() {
    this.renderAxis();
  }
  
  renderAxis() {
    const { axisFunction, scale, id, ticks, tickSizeOuter, tickSizeInner, tickPadding, tickFormat } = this.props;
    let axis = axisFunction()
      .scale(scale)
      .ticks(ticks)
      .tickSizeOuter(tickSizeOuter)
      .tickSizeInner(tickSizeInner)
      .tickPadding(tickPadding)
      .tickFormat(tickFormat);
    
    d3.select(this.axisElement).call(axis);
  }
  
  render() {
    return (
      <g
        id={this.props.id}
        ref={(el) => {this.axisElement = el;}}
        transform={this.props.translate}
        style={{fontSize: 9}}
      />
    );
  }
}

class AxisLegend extends React.Component {
  constructor(props) {
    super(props);
  }
  
  render() {
    const { transform, text } = this.props;
    return (
      <g transform={transform}>
        <text style={{fontSize: 11, fontWeight: 700, fill: '#424242', letterSpacing: 1}}>{text}</text>
      </g>
    );
  }
}

class Dots extends React.Component {
  constructor(props) {
    super(props);
  }
  
  isMouseOver(data) {
    this.props.isTooltip({
      isMove: true,
      year: data.Year,
      winner: data.Winner,
      nationality: 'img/' + data.Nationality + '.png',
      vehicle: data.Vehicle,
      time: data.Time
    });
  }
  
  isMouseOut(){
    this.props.isTooltip({
      isMove: false,
      year: null,
      winner: null,
      nationality: null,
      vehicle: null,
      time: null
    });
  }
  
  render() {
    const { scales, dimensions, margins, data } = this.props;
    const { xScale, yScale } = scales;
    
    let unofficial = {cursor: 'pointer', fill: '#ff9100'};
    let short = {cursor: 'pointer', fill: '#ff1744'};
    let p0 = {cursor: 'pointer', fill: '#d500f9'};
    let p6 = {cursor: 'pointer', fill: '#651fff'};
    let p21 = {cursor: 'pointer', fill: '#3d5afe'};
    // p35 #2979ff
    let p46 = {cursor: 'pointer', fill: '#00b0ff'};
    let p57 = {cursor: 'pointer', fill: '#00e5ff'};
    let p76 = {cursor: 'pointer', fill: '#1de9b6'};
    let p100 = {cursor: 'pointer', fill: '#00e676'};
    
    const getTime = d => {
			let [mm, ss, ll] = d.Time.split(/[:.]/).map(x => Number(x));
			let date = new Date();
      date.setHours(0);
			date.setMinutes(mm);
			date.setSeconds(ss);
      date.setMilliseconds(ll);
			return date;
		}
    
    const dot = (
      data.map(d => (
        <circle
          className='dot'
          data-xvalue={d.Year}
          data-yvalue={getTime(d)}
          cx={xScale(d.Year)}
          cy={yScale(getTime(d))}
          r={4}
          style={eval(d.Legend)}
          onMouseOver={()=> this.isMouseOver(d)}
          onMouseOut={() => this.isMouseOut()}
        />
      ))
    );
    
    return (
      <g>
        {dot}
      </g>
    );
  }
}

ReactDOM.render(
  <ScatterPlot />,
  document.getElementById('root')
);
